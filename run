#!/bin/bash

set -m

function print_help {
  echo -e "Usage: $0 [operation]\n"
  echo -e "Supported operations:"
  echo -e "\tupdate\t\t\tRecursively searches for and runs all update.sh scripts."
  echo -e "\trestore\t\t\tRecursively searches for and runs all restore.sh scripts."
  echo -e "\t-i | --interactive\tInteractive mode (ask before removing logs)."
  echo -e "\t-h | --help\t\tPrint this help message."
}

if [[ -z "$1" ]]; then
  echo "Error: No operation provided."
  print_help
  exit 1
fi


for i in "$@"; do
  case $i in
    -h|--help)
      print_help
      exit 0
      shift
    ;;
    -i|--interactive)
      interactive="true"
      shift
    ;;
    update)
      script_name="update.sh"
      shift
    ;;
    restore)
      script_name="restore.sh"
      shift
    ;;
    *)
      echo -e "Error: Unknown operation provided.\n"
      print_help
      exit 1
    ;;
  esac
done

if [[ script_name == "update.sh" ]]; then
  config_helper="./.helpers/update-if-exists.sh"
elif [[ script_name == "restore.sh" ]]; then
  config_helper="./.helpers/restore-if-exists.sh"
fi

config_files_name="config_files.sh"

function exec_with_config_files {
  # cd into directory where config_files.sh is located
  local oldpwd=$PWD
  cd `dirname $1`
  # load config files
  source "./$config_files_name"
  # execute copy files helper for each file
  for file in ${config_files[@]}; do
    eval "$config_helper" "$file"
  done
  # cleanup imported config_files
  unset config_files
  # cd back to where function started
  cd $oldpwd
}

function exec_script {
  local oldpwd=$PWD
  cd `dirname $1`
  eval "./$script_name"
  cd $oldpwd
}

# $1: glob for searched file
# $2: function to call with found file as argument
function find_and_exec {
  local file_glob="$1"
  local callback=$2

  find . -name "$file_glob" | while read file; do
    $callback "$file"
  done
}

# Recursively search for config_files.sh and exec scripts.
find_and_exec "$config_files_name" exec_with_config_files

# Recursively search for update.sh/restore.sh and exec scripts.
find_and_exec "$script_name" exec_script


# -----------------------------------------------------------------------------
# Post update/restore
# -----------------------------------------------------------------------------

# If update, add an auto-update commit
if [[ "$script_name" == "update.sh" ]]; then
  git add -A && git commit -m "auto-update on $(date "+%Y/%m/%d %H:%M:%S")"
fi

function remove_logs {
  rm -f ./**/*.log
}

# If restore, ask to remove all .log files
if [[ "$script_name" == "restore.sh" ]]; then
  if [[ "$interactive" != "true" ]]; then
    remove_logs
  else
    while true; do
        read -p "Remove all .log files? (y/n) " yn
        case $yn in
            [Yy]* )
              remove_logs
              break
            ;;
            [Nn]* )
              break
            ;;
        esac
    done
  fi
fi
